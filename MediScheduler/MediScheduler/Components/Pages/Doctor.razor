@page "/doctors"
@using Radzen.Blazor
@using MediScheduler.Entities
@using Microsoft.EntityFrameworkCore
@inject DoctorService doctorService
@rendermode InteractiveServer

<RadzenText TextStyle="TextStyle.H3" TagName="TagName.P" TextAlign="Radzen.TextAlign.Left"><strong>Doctors</strong></RadzenText>

@if (doctors == null)
{
    <p>Loading...</p>
}
else
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="Radzen.FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="Radzen.HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@doctors" ColumnWidth="300px" LogicalFilterOperator="Radzen.LogicalFilterOperator.Or" SelectionMode="Radzen.DataGridSelectionMode.Single" @bind-Value=@selectedDoctors class="rz-border-radius-6 rz-shadow-4">
        <Columns>
            <RadzenDataGridColumn Property="LicenseNo" Filterable="false" Title="LicenseNo" Frozen="true" Width="80px"/>
            <RadzenDataGridColumn Property="FirstName" Filterable="false" Title="First Name" Frozen="true" Width="160px" />
            <RadzenDataGridColumn Property="LastName" Filterable="false" Title="Last Name" Width="160px" />
            <RadzenDataGridColumn Property="ContactData" Filterable="false" Title="Address" Width="200px" />
        </Columns>
    </RadzenDataGrid>
}




@code {
    private IEnumerable<MediScheduler.Entities.Doctor> doctors;
    private IList<MediScheduler.Entities.Doctor> selectedDoctors;
    private MediScheduler.Entities.Doctor newDoctor = new MediScheduler.Entities.Doctor();

    protected override async Task OnInitializedAsync()
    {
        doctors = await doctorService.GetDoctorsAsync();
        selectedDoctors = new List<MediScheduler.Entities.Doctor>() { doctors.FirstOrDefault() };
    }

    private async Task AddDoctor()
    {
        if (newDoctor.SpecialtyId != null)
        {
            await doctorService.AddDoctorAsync(newDoctor);
            doctors = await doctorService.GetDoctorsAsync();
            newDoctor = new MediScheduler.Entities.Doctor();
        }
    }
}
